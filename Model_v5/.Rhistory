ifelse(b!=0, 'b', ''),
ifelse(c!=0, 'c', ''), sep='')) %>%
arrange(clientId)
View(orders.segm)
lcg <- orders.segm %>%
group_by(segm.rec, segm.freq) %>%
summarise(quantity=n()) %>%
mutate(client='client') %>%
ungroup()
View(lcg)
ggplot(lcg, aes(x=client, y=quantity, fill=quantity)) +
theme_bw() +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', alpha=0.6) +
geom_text(aes(y=max(quantity)/2, label=quantity), size=4) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids")
?dcast
log(2)
log(2.7)
file <- "ind_paris_5.csv"
data_dir <- paste0("/Users/ashishkabra/Dropbox/Dmitry_INSEAD/VelibData",file)
data_dir
data_dir <- paste0("/Users/ashishkabra/Dropbox/Dmitry_INSEAD/VelibData/",file)
data_dir
load.ffdf(save_dir)
require("ffdf")
require("ff")
load.ffdf(save_dir)
require(ffbase)
load.ffdf(save_dir)
load.ffdf(data_dir)
filelist <- c("Paris/ind_paris_5.csv","Paris/ind_paris_6.csv",
"Paris/ind_paris_7.csv","Paris/ind_paris_8.csv")
dataset <- c()
for(file in filelist) {
data_dir <- paste0("/Users/ashishkabra/Dropbox/Dmitry_INSEAD/VelibData/",file)
load.ffdf(data_dir)
dataset <- rbind(dataset, wdcRaw)
}
filelist <- c("ind_paris_5.csv","ind_paris_6.csv",
"ind_paris_7.csv","ind_paris_8.csv")
dataset <- c()
for(file in filelist) {
data_dir <- paste0("/Users/ashishkabra/Dropbox/Dmitry_INSEAD/VelibData/",file)
load.ffdf(data_dir)
dataset <- rbind(dataset, wdcRaw)
}
dim(dataset)
dim(wdcRaw)
dataset[1,]
#constants file
rm(list=ls())
if(.Platform$OS.type=="windows"  & Sys.info()["user"]=="Ashish") {
csv_dir <- "C:\\Users\\Ashish\\Desktop\\Velib Data\\CSVData"
work_dir <- "C:/Users/Ashish/Dropbox/Ashish_Karan/Sustainable Transportation System/Data/Code/R/Model_v5"
dropbox_dir <- "C:/Users/Ashish/Dropbox/Ashish_Karan"
} else {
if(.Platform$OS.type=="windows" & Sys.info()["user"]=="A") {
#incidates my XPS DELL Machine
work_dir <- "C:/Users/A/Dropbox/Ashish_Karan/Sustainable Transportation System/Data/Code/R/Model_v5"
csv_dir <- "C:/Users/A/Dropbox/VelibData/CSVData"
dropbox_dir <- "C:/Users/A/Dropbox/Ashish_Karan"
}
else {
if((Sys.info()["user"])=="ashish") {
#incidates my linux machine
work_dir <- "/home/ashish/Dropbox/Ashish_Karan/Sustainable Transportation System/Data/Code/R/Model_v5"
csv_dir <- "/home/ashish/Dropbox/VelibData/CSVData"
dropbox_dir <- "/home/ashish/Dropbox/Ashish_Karan"
#options(fftempdir="/home/ashish/fftempdir")
}
if(.Platform$OS.type=="unix"  & (Sys.info()["user"])=="ashishkabra") {
#incidates my macbook
work_dir <- "/Users/ashishkabra/Dropbox/Ashish_Karan/Sustainable Transportation System/Data/Code/R/Model_v5"
csv_dir <- "/Users/ashishkabra/Dropbox/VelibData/CSVData"
dropbox_dir <- "/Users/ashishkabra/Dropbox/Ashish_Karan"
#options(fftempdir="/home/ashish/fftempdir")
}
if((Sys.info()["user"])=="ak") {
#incidates my linux machine
work_dir <- "/home/ak/Dropbox/Ashish_Karan/Sustainable Transportation System/Data/Code/R/Model_v5"
csv_dir <- "/home/ak/Desktop/Velib_Data/CSVData"
dropbox_dir <- "/home/ak/Dropbox/Ashish_Karan"
}
if((Sys.info()["user"])=="rstudio") {
csv_dir <- "/home/rstudio/workspace/CSVData"
work_dir <- "/home/rstudio/Data/Model_v5"
dropbox_dir <- "/home/ubuntu/Dropbox/Ashish_Karan"
}
}
}
setwd(work_dir)
st_id_file <- "Paris/st_id_data_01_07_13.txt"
max_walking_dis <- 0.6
library('nloptr')
library('ffbase')
library('biglm')
library('sfsmisc')
library("Rcpp")
library("RcppArmadillo")
library("ipoptr")
library("plm")
library("sandwich")
source("setup.R")
options(digits=10)
#for ffdf chunk size
options(ffbatchbytes=167772160)
require("colorspace")
#obj.size <- napply(names, function(x) round(object.size(x)/1024^2,2))
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
#obj.size <- napply(names, object.size)
obj.size <- napply(names, function(x) round(object.size(x)/1024^2,2))
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.dim)
names(out) <- c("Type", "Size", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
source("eval_func_4_GMM_new_temp_2.89.R")
theta1
#This file generates data for observations weights=1 and assumed values of deltas and
#then estimates them
source("data_estimation_2.6_weather_saved.R")
source("eval_func_2_cpp_MPEC.R")
points_save <- points
wdcMerged_store <- wdcMerged
user_serv_lvl_store <- user_serv_lvl
#make the weights to 1
#put a value of delta
#compute lambda
colnames_theta1 <<- c("dis coef","rand coef","density ridership","density metro","density intercept")
density_ridership_col <<- 3
density_metro_col <<- 4
density_intercept_col <<- 5
density_metro_evening_col <<- 6
wdcMerged <- wdcMerged_store
user_serv_lvl <- user_serv_lvl_store
points <- points_save
# #keeping "6_0" "6_3" and "7_0" "7_3"
# time_windows <- c("6_0","6_5","7_0","7_5")
# tws <- c("0","5")
# #time_windows <- c("6_3")
# wdcMerged <- subset(wdcMerged, tw_group_fac %in% time_windows)
# wdcMerged <- droplevels(wdcMerged)
# levels(wdcMerged$tw_group_fac)
# user_serv_lvl <- subset(user_serv_lvl, tw %in% tws)
# user_serv_lvl <- droplevels(user_serv_lvl)
# unique(user_serv_lvl$tw)
#
# wdcMerged <- droplevels(wdcMerged)
# user_serv_lvl$st_tw_index <- as.numeric(user_serv_lvl$st_tw)
# wdcMerged$st_tw_index <- as.numeric(wdcMerged$st_tw)
rm(current_serv_lvl)
# #making 0 demand observations insignificant
# wdcMerged$obs_weight[which(wdcMerged$stocked_out==F & wdcMerged$out_dem_sum<=0.1)] <- 0.1
# wdcMerged$out_dem_sum <- wdcMerged$out_dem_sum/wdcMerged$obs_weight
# wdcMerged$obs_weight <- 1
#removing really low demand
wdcMerged$out_dem_sum[which(wdcMerged$out_dem_sum<=0.01 &
wdcMerged$stocked_out==FALSE)] <- 0.01
v0_vec <- generate_v0(10)
theta <- c(-10.7374110745,1,10.8860478015,403.4177015742,2.8258972200, 200)
focal_station_index <- 1
mode <- 1
theta1 <- theta
delta_list <- rnorm(nrow(wdcMerged), -3,1)
no_st <- max(wdcMerged$station_id_index)
tw_group_list <- unique(wdcMerged$tw_group)
no_st
tw_group_list
points_sub <- which(stid_in_localstations(focal_station_index, points$local_stations))
length(points_sub)
tw_in <- wdcMerged$tw[which(wdcMerged$tw_group == tw_groupin)[1]]
tw_group_list
tw_groupin <- tw_group_list[1]
tw_in <- wdcMerged$tw[which(wdcMerged$tw_group == tw_groupin)[1]]
tw_in
density_vec <- get_points_density_grad_metro_evening_col(points, tw_in)
summary(density_vec[points_sub_idx])
points_sub_idx <- which(stid_in_localstations(focal_station_index, points$local_stations))
points_sub <- points[points_sub_idx,]
points_sub$density <- density_vec[points_sub_idx]
View(points_sub)
density_vec <- get_points_density(points, tw_in)
tw_in <- wdcMerged$tw[which(wdcMerged$tw_group == tw_groupin)[1]]
tw_in
density_vec <- get_points_density(points, tw_in)
density_vec <- get_points_density(points, theta1, tw_in)
points_sub <- points[points_sub_idx,]
points_sub$density <- density_vec[points_sub_idx]
View(points_sub)
theta1
summary(density_vec)
summary(points_sub_idx)
no_st <- max(wdcMerged$station_id_index)
tw_group_list <- unique(wdcMerged$tw_group)
station_data <- unique(wdcMerged[,c("station_id","lat","lon","station_id_index",
"local_stations")])
station_data <- station_data[order(station_data$station_id_index),]
beta1 <- theta1[1]
sigma0 <- theta1[2]
lat1 <- station_data[,"lat"]
lon1 <- station_data[,"lon"]
lambda_t <- rep(0,nrow(station_data))
tw_groupin
deltain <- delta_list[which(wdcMerged$tw_group == tw_groupin)]
deltain <- as.numeric(by(deltain, wdcMerged$station_id_index[which(wdcMerged$tw_group == tw_groupin)], FUN=mean))
#   points_sub <- station_data$local_points[focal_station_index]
tw_in <- wdcMerged$tw[which(wdcMerged$tw_group == tw_groupin)[1]]
points_sub_idx <- which(stid_in_localstations(focal_station_index, points$local_stations))
density_vec <- get_points_density(points, theta1, tw_in)
points_sub <- points[points_sub_idx,]
points_sub$density <- density_vec[points_sub_idx]
for(i in 1:nrow(points_sub)) {
lat2 <- points_sub[i,"lat"]
lon2 <- points_sub[i,"lon"]
#dis_v <- latlondistance(lat1, lon1, lat2, lon2)
st_point_list <- splitchar(points_sub$local_stations[i])
list_obs <- st_point_list
if(length(list_obs)==0) next
station_data_i <- station_data[st_point_list,]
dis_v <- latlondistance(points_sub[i,"lat"], points_sub[i,"lon"],
station_data_i$lat, station_data_i$lon)
sto_state = rep(0,nrow(station_data_i))
if(mode==1) {
sto_state[which(station_data_i$station_id_index==focal_station_index)]=1
}
util <- (beta1*dis_v) + deltain[st_point_list]
exputil <- exp(util)
util_st <- (!sto_state) * exputil
den_util <- sum(util_st)
lambda_st_t <- rep(0,length(util_st))
for(k in 1:length(v0_vec)) {
out <- exp(-v0_vec[k]*sigma0)
prob_t <- util_st/(out+den_util)*(points_sub[i,"density"]/length(v0_vec))
lambda_st_t <- lambda_st_t + prob_t
}
lambda_t[list_obs] <- lambda_t[list_obs] + lambda_st_t
}
summary(lambda_t)
demand_substitution <- function(focal_station_index, mode, theta1, wdcMerged, points,delta_list) {
#find the number of people that substitute from a station to another
#fix a station as focal station
#select only points local to it.
#in first case select assume this station is stocked and find the demand at nearby stations
#in next case take this station out from choice set and find demand and compare total demands
#in each case
no_st <- max(wdcMerged$station_id_index)
tw_group_list <- unique(wdcMerged$tw_group)
station_data <- unique(wdcMerged[,c("station_id","lat","lon","station_id_index",
"local_stations")])
station_data <- station_data[order(station_data$station_id_index),]
beta1 <- theta1[1]
sigma0 <- theta1[2]
lat1 <- station_data[,"lat"]
lon1 <- station_data[,"lon"]
lambda_t <- rep(0,nrow(station_data))
for(tw_groupin in tw_group_list) {
deltain <- delta_list[which(wdcMerged$tw_group == tw_groupin)]
deltain <- as.numeric(by(deltain, wdcMerged$station_id_index[which(wdcMerged$tw_group == tw_groupin)], FUN=mean))
#   points_sub <- station_data$local_points[focal_station_index]
tw_in <- wdcMerged$tw[which(wdcMerged$tw_group == tw_groupin)[1]]
points_sub_idx <- which(stid_in_localstations(focal_station_index, points$local_stations))
density_vec <- get_points_density(points, theta1, tw_in)
points_sub <- points[points_sub_idx,]
points_sub$density <- density_vec[points_sub_idx]
for(i in 1:nrow(points_sub)) {
lat2 <- points_sub[i,"lat"]
lon2 <- points_sub[i,"lon"]
#dis_v <- latlondistance(lat1, lon1, lat2, lon2)
st_point_list <- splitchar(points_sub$local_stations[i])
list_obs <- st_point_list
if(length(list_obs)==0) next
station_data_i <- station_data[st_point_list,]
dis_v <- latlondistance(points_sub[i,"lat"], points_sub[i,"lon"],
station_data_i$lat, station_data_i$lon)
sto_state = rep(0,nrow(station_data_i))
if(mode==1) {
sto_state[which(station_data_i$station_id_index==focal_station_index)]=1
}
util <- (beta1*dis_v) + deltain[st_point_list]
exputil <- exp(util)
util_st <- (!sto_state) * exputil
den_util <- sum(util_st)
lambda_st_t <- rep(0,length(util_st))
for(k in 1:length(v0_vec)) {
out <- exp(-v0_vec[k]*sigma0)
prob_t <- util_st/(out+den_util)*(points_sub[i,"density"]/length(v0_vec))
lambda_st_t <- lambda_st_t + prob_t
}
lambda_t[list_obs] <- lambda_t[list_obs] + lambda_st_t
}
}
return(lambda_t)
}
subs_perc <- average_demand_susbtitution(theta1,wdcMerged,points,delta_list)
subs_perc <- average_demand_susbtitution(theta1,wdcMerged,points,delta_list)
theta1 <- c(-12.28769991999    4.20013541466    0.09999999003  282.66078886268    8.10824517514 7505.59969617232)
theta1 <- c(-12.28769991999, 4.20013541466, 0.09999999003, 282.66078886268, 8.10824517514, 7505.59969617232)
delta_all <- compute_delta_list_cntrt_map_new(theta1,wdcMerged, points)
length(delta_all)
deltain_stin <- delta_all[which(wdcMerged$stocked_out==F)]
subs_perc <- average_demand_susbtitution(theta1,wdcMerged,points,delta_all)
subs_perc
subs_perc_save <- subs_perc
theta1[2]
theta1[2] <- 0
subs_perc <- average_demand_susbtitution(theta1,wdcMerged,points,delta_all)
subs_perc_save
theta1[1] <- -4
theta1
subs_perc <- average_demand_susbtitution(theta1,wdcMerged,points,delta_all)
source("util_functions.R")
mean(subs_perc)
cf_data <- wdcMerged[,c("station_id_index","tw_group","sto_state_local","local_stations","obs_weight",
"st_tw","st_tw_index", "station_id",
"stocked_out","lat","lon","out_dem_sum")]
perc_substituted <- c()
focal_station_index <- 1
for(focal_station_index in c(1:max(cf_data$station_id_index))) {
print(focal_station_index)
lambda1 <- calculate_subs_perc_focal_station(focal_station_index, 0, theta1, cf_data, points,delta_all)
lambda2 <- calculate_subs_perc_focal_station(focal_station_index, 1, theta1, cf_data, points,delta_all)
focal_st_demand <- sum(lambda1[which(cf_data$station_id_index==focal_station_index)])
substituted_demand <- sum(lambda2) - sum(lambda1) + focal_st_demand
perc_substituted <- c(perc_substituted,(substituted_demand/focal_st_demand*100))
print(substituted_demand/focal_st_demand*100)
}
legnth(delta_all)
length(delta_all)
summary(delta_all)
theta1 <- c(-12.28769991999, 4.20013541466, 0.09999999003, 282.66078886268, 8.10824517514, 7505.59969617232)
calculate_subs_perc_focal_station <- function(focal_station_index, mode, theta1, cf_data, points,delta_ave) {
so_vec_cf <- rep(0,max(cf_data$station_id_index))
cf_data$stocked_out = FALSE
if(mode==1) {
so_vec_cf[focal_station_index] <- 1
cf_data$stocked_out[which(cf_data$station_id_index==focal_station_index)] = TRUE
}
cf_data$sto_state_local <- gen_sto_state_local_char(so_vec_cf, cf_data$local_stations)
tw_groupin_list <- unique(wdcMerged$tw_group)
points_sub <- which(stid_in_localstations(focal_station_index, points$local_stations))
points_sub <- points[points_sub,]
lambda_t <- c()
for(tw_groupin in tw_groupin_list) {
cf_dataday = subset(cf_data, tw_group==tw_groupin)
cf_dataday$obs_weight <- 1
deltain_tw <- delta_ave[which(cf_data$tw_group==tw_groupin)]
lambda_t <- c(lambda_t,
eval_lambda_delta_list_new(deltain_tw, theta1,cf_dataday, points_sub, tw_groupin)$objective)
}
return((lambda_t))
}
perc_substituted <- c()
focal_station_index <- 1
for(focal_station_index in c(1:max(cf_data$station_id_index))) {
print(focal_station_index)
lambda1 <- calculate_subs_perc_focal_station(focal_station_index, 0, theta1, cf_data, points,delta_all)
lambda2 <- calculate_subs_perc_focal_station(focal_station_index, 1, theta1, cf_data, points,delta_all)
focal_st_demand <- sum(lambda1[which(cf_data$station_id_index==focal_station_index)])
substituted_demand <- sum(lambda2) - sum(lambda1) + focal_st_demand
perc_substituted <- c(perc_substituted,(substituted_demand/focal_st_demand*100))
print(substituted_demand/focal_st_demand*100)
}
perc_substituted <- c()
focal_station_index <- 1
print(focal_station_index)
lambda1 <- calculate_subs_perc_focal_station(focal_station_index, 0, theta1, cf_data, points,delta_all)
summary(lambda1)
summary(lambda1/cf_data$obs_weight)
calculate_subs_perc_focal_station <- NULL
calculate_subs_perc_focal_station_alldata <- function(focal_station_index, mode, theta1, cf_data, points,delta_ave) {
so_vec_cf <- rep(0,max(cf_data$station_id_index))
cf_data$stocked_out = FALSE
if(mode==1) {
so_vec_cf[focal_station_index] <- 1
cf_data$stocked_out[which(cf_data$station_id_index==focal_station_index)] = TRUE
}
cf_data$sto_state_local <- gen_sto_state_local_char(so_vec_cf, cf_data$local_stations)
tw_groupin_list <- unique(wdcMerged$tw_group)
points_sub <- which(stid_in_localstations(focal_station_index, points$local_stations))
points_sub <- points[points_sub,]
lambda_t <- c()
for(tw_groupin in tw_groupin_list) {
cf_dataday = subset(cf_data, tw_group==tw_groupin)
deltain_tw <- delta_ave[which(cf_data$tw_group==tw_groupin)]
lambda_t <- c(lambda_t,
eval_lambda_delta_list_new(deltain_tw, theta1,cf_dataday, points_sub, tw_groupin)$objective)
}
return((lambda_t))
}
perc_substituted <- c()
focal_station_index <- 1
for(focal_station_index in c(1:max(cf_data$station_id_index))) {
print(focal_station_index)
lambda1 <- calculate_subs_perc_focal_station_alldata(focal_station_index, 0, theta1, cf_data, points,delta_all)
lambda2 <- calculate_subs_perc_focal_station_alldata(focal_station_index, 1, theta1, cf_data, points,delta_all)
focal_st_demand <- sum(lambda1[which(cf_data$station_id_index==focal_station_index)])
substituted_demand <- sum(lambda2) - sum(lambda1) + focal_st_demand
perc_substituted <- c(perc_substituted,(substituted_demand/focal_st_demand*100))
print(substituted_demand/focal_st_demand*100)
}
summary(cf_data$obs_weight)
cf_data$st_twgroup <- paste0(cf_data$station_id_index,"_",cf_data$tw_group)
cf_data_dt <- data.table(cf_data)
cf_data_dt$lambda <- lambda1
cf_data_dt$lambda <- lambda1
lambda_dt <- cf_data_dt[,list(lambda_sum=sum(lambda),weight_sum=sum(obs_weight),
station_id_index=station_id_index[1]), by=c("st_twgroup")]
View(lambda_dt)
getMeanDemandDf <- function(lambda1, cf_data) {
#for each st_twgroup compute the total wighted lambdas
#compute the total wieght of observations
#divide the two to compute average lambda and return in df, along with corresponding station_id_index of each
cf_data_dt <- data.table(cf_data)
cf_data_dt$lambda <- lambda1
lambda_dt <- cf_data_dt[,list(lambda_sum=sum(lambda),weight_sum=sum(obs_weight),
station_id_index=station_id_index[1]), by=c("st_twgroup")]
lambda_dt$lambda_mean <- lambda_dt$lambda_sum/lambda_dt$weight_sum
return(lambda_dt)
}
lambda1_dt <- getMeanDemandDf(lambda1, cf_data)
lambda2 <- calculate_subs_perc_focal_station_alldata(focal_station_index, 1, theta1, cf_data, points,delta_all)
lambda2_df <- getMeanDemandDf(lambda2, cf_data)
lambda2_dt <- getMeanDemandDf(lambda2, cf_data)
focal_st_demand <- sum(lambda1_dt$lambda_mean[which(lambda1_dt$station_id_index==focal_station_index)])
focal_st_demand
View(lambda1_dt)
focal_station_index
focal_station_index <- 1
focal_st_demand <- sum(lambda1_dt$lambda_mean[which(lambda1_dt$station_id_index==focal_station_index)])
focal_st_demand
substituted_demand <- sum(lambda2_dt$lambda_mean) - sum(lambda1_dt$lambda_mean) + focal_st_demand
substituted_demand
print(substituted_demand/focal_st_demand*100)
print(focal_station_index)
lambda1 <- calculate_subs_perc_focal_station_alldata(focal_station_index, 0, theta1, cf_data, points,delta_all)
lambda1_dt <- getMeanDemandDf(lambda1, cf_data)
lambda2 <- calculate_subs_perc_focal_station_alldata(focal_station_index, 1, theta1, cf_data, points,delta_all)
lambda2_dt <- getMeanDemandDf(lambda2, cf_data)
focal_station_index
focal_st_demand <- sum(lambda1_dt$lambda_mean[which(lambda1_dt$station_id_index==focal_station_index)])
substituted_demand <- sum(lambda2_dt$lambda_mean) - sum(lambda1_dt$lambda_mean) + focal_st_demand
print(substituted_demand/focal_st_demand*100)
calculate_subs_perc_alldata <- function(theta1, delta_all, wdcMerged, points) {
#creating a data set where there is one entry for each station_tw_group and
#will manipulate stockout state and compute the substitution percewntage
cf_data <- wdcMerged[,c("station_id_index","tw_group","sto_state_local","local_stations","obs_weight",
"st_tw","st_tw_index", "station_id",
"stocked_out","lat","lon","out_dem_sum")]
##   keep 1 entry for each st_twgroup.
cf_data$st_twgroup <- paste0(cf_data$station_id_index,"_",cf_data$tw_group)
#   delta_all_weighted <- delta_all*cf_data$obs_weight
#   delta_sum <- by(delta_all_weighted, cf_data$st_twgroup, FUN=sum)
#   weighted_sum <- by(cf_data$obs_weight, cf_data$st_twgroup, FUN=sum)
#   delta_ave_df <- data.frame(delta_sum=as.numeric(delta_sum), st_twgroup=(names(delta_sum)), weighted_sum=as.numeric(weighted_sum))
#   delta_ave_df$st_twgroup <- as.character(delta_ave_df$st_twgroup)
#   delta_ave_df$delta_ave <- delta_ave_df$delta_sum/delta_ave_df$weighted_sum
#   cf_data <- cf_data[which(!duplicated(cf_data$st_twgroup)),]
#
#   delta_ave_df <- delta_ave_df[order(order(cf_data$st_twgroup)),]
#   if(!identical(cf_data$st_twgroup, delta_ave_df$st_twgroup)) stop("st_twgroup in cf_data and delta_ave_df not equal")
perc_substituted <- c()
focal_station_index <- 1
for(focal_station_index in c(1:max(cf_data$station_id_index))) {
print(focal_station_index)
lambda1 <- calculate_subs_perc_focal_station_alldata(focal_station_index, 0, theta1, cf_data, points,delta_all)
lambda1_dt <- getMeanDemandDf(lambda1, cf_data)
lambda2 <- calculate_subs_perc_focal_station_alldata(focal_station_index, 1, theta1, cf_data, points,delta_all)
lambda2_dt <- getMeanDemandDf(lambda2, cf_data)
focal_st_demand <- sum(lambda1_dt$lambda_mean[which(lambda1_dt$station_id_index==focal_station_index)])
substituted_demand <- sum(lambda2_dt$lambda_mean) - sum(lambda1_dt$lambda_mean) + focal_st_demand
perc_substituted <- c(perc_substituted,(substituted_demand/focal_st_demand*100))
print(substituted_demand/focal_st_demand*100)
}
return(perc_substituted)
}
theta1_1 <- theta1
subs_perc_1 <- calculate_subs_perc_alldata(theta1_1,delta_all,wdcMerged,points)
theta1_2 <- theta1
theta1_2[2] <- 0 #rd coef = 0
subs_perc_2 <- calculate_subs_perc_alldata(theta1_2,delta_all,wdcMerged,points)
theta1_3 <- theta1
theta1_3[2] <- 0 #rd coef = 0
theta1_3[1] <- -4 #rd coef = 0
subs_perc_3 <- calculate_subs_perc_alldata(theta1_3,delta_all,wdcMerged,points)
theta1_4 <- theta1
theta1_4[2] <- 8 #rd coef = 0
theta1_4[1] <- -4 #rd coef = 0
subs_perc_4 <- calculate_subs_perc_alldata(theta1_4,delta_all,wdcMerged,points)
mean(subs_perc_1)
mean(subs_perc_2)
mean(subs_perc_3)
mean(subs_perc_4)
